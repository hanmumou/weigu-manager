<template>
  <el-table ref="goodslistTable" :data="tableData" align="center" stripe toggle-row-selection @expand-change="rowOpen" @selection-change="changeFun">
    <el-table-column type="expand" align="center">
      <template slot-scope="props">
        <el-form label-position="right" inline class="table-expand" hide-required-asterisk="true" label-width="120px">
          <el-form-item required label="团购价：">
            <el-input v-model="props.row.price" placeholder="请输入团购价"/>
          </el-form-item>
          <el-form-item required label="原价：">
            <el-input v-model="props.row.original_price" placeholder="请输入原价"/>
          </el-form-item>
          <el-form-item label="产品规格：">
            <el-table :data="specData" :span-method="objectSpanMethod" border class="tableWidth">
              <template v-for="(col, index) in cols">
                <el-table-column :label="col.label" :prop="col.prop" :key="index">
                  <template slot-scope="scope">
                    <div v-if="index==0"><span>{{ scope.row.names }}</span></div>
                    <div v-if="index==1 && cols.length>3"><span>{{ scope.row.fenleis }}</span></div>
                    <div v-if="index==2 && cols.length>4"><span>{{ scope.row.sanjis }}</span></div>
                    <div v-if="index==cols.length-2"><el-input v-model="scope.row.jiage" size="small"/></div>
                    <div v-if="index==cols.length-1"><el-input v-model="scope.row.kucun" size="small"/></div>
                  </template>
                </el-table-column>
              </template>
            </el-table>
          </el-form-item>
        </el-form>
        <!-- <el-button class="submit" @click="submitLine(props.row)">提交</el-button> -->
      </template>
    </el-table-column>
    <el-table-column type="selection" width="30"/>
    <el-table-column label="产品ID" prop="id"/>
    <el-table-column label="产品图片" prop="main_picture">
      <template slot-scope="scope">
        <img :src="scope.row.main_picture" width="100px" height="100px">
      </template>
    </el-table-column>
    <el-table-column label="产品名称" prop="name"/>
    <el-table-column label="产品分类" prop="category_name"/>
    <el-table-column label="发布时间" prop="start_at"/>
    <el-table-column label="展示区域" prop="show_region_type">
      <template slot-scope="scope">
        <div v-if="scope.row.show_region_type == 1">
          <span>全国</span>
        </div>
        <div v-if="scope.row.show_region_type == 0">
          <span>指定区域</span>
        </div>
      </template>
    </el-table-column>
    <el-table-column label="限购数量" prop="goods_limit_stock">
      <template slot-scope="scope">
        <el-input v-model="scope.row.goods_limit_stock" class="ipt"/>
      </template>
    </el-table-column>
    <el-table-column label="虚拟销量" prop="virtual_sales_num">
      <template slot-scope="scope">
        <el-input v-model="scope.row.virtual_sales_num" class="ipt"/>
      </template>
    </el-table-column>
    <el-table-column label="排序" prop="sort">
      <template slot-scope="scope">
        <el-input v-model="scope.row.sort" class="ipt"/>
      </template>
    </el-table-column>
    <el-table-column label="首页推荐" prop="is_index">
      <template slot-scope="scope">
        <div v-if="scope.row.is_index == true">
          <el-button size="mini" @click="changeIndex(scope.row)">推荐</el-button>
        </div>
        <div v-else :key="index">
          <el-button size="mini" @click="changeIndex(scope.row)">取消</el-button>
        </div>
      </template>
    </el-table-column>
    <el-table-column label="销售记录" prop="is_sales_record">
      <template slot-scope="scope">
        <div v-if="scope.row.is_sales_record == 1">
          <el-button size="mini" @click="submit(scope.$index, scope.row)">开启中</el-button>
        </div>
        <div v-else :key="index">
          <el-button size="mini" @click="submit(scope.$index, scope.row)">关闭中</el-button>
        </div>
      </template>
    </el-table-column>
    <el-table-column label="操作" width="250px">
      <template slot-scope="scope">
        <el-button size="mini" @click="handleEdit(scope.$index, scope.row)">编辑</el-button>
        <el-button size="mini" @click="submit(scope.$index, scope.row)">保存</el-button>
        <el-button size="mini" type="danger" @click="handleDelete(scope.row)">删除</el-button>
      </template>
    </el-table-column>
  </el-table>
</template>
<script>
import { changeTj, delGoods, getSpecList, editGoods } from '@/api/goodslist'
export default {
  name: 'GoodsTable',
  props: {
    tableData: {
      type: Array,
      required: true
    },
    checkAll: {
      type: Boolean,
      default: false
    }
  },
  data() {
    return {
      cols: [],
      specData: [],
      namesArr: [], // 一级要合并数组 [2,0,1,3,0,0] 代表第一二行合并,第三行不变,第四五六行合并,0代表原本的那一行被合并,因此这个列被消除
      namesPos: 0, // 一级要合并数组内容的序号
      fenleisArr: [], // 同上 二级
      fenleisPos: 0,
      checkTable: []
    }
  },
  watch: {
    // 监听父组件穿入得值实现全选
    checkAll: function(newValue, oldValue) {
      if (newValue) {
        this.tableData.forEach(row => {
          this.$refs.goodslistTable.toggleRowSelection(row)
        })
      } else {
        this.$refs.goodslistTable.clearSelection()
      }
    }
  },
  methods: {
    // 改变推荐状态
    async changeIndex(val) {
      try {
        await changeTj(val.id)
        this.$emit('ee')
      } catch (err) {
        console.log(err)
      }
    },
    // 表格合并
    objectSpanMethod({ row, column, rowIndex, columnIndex }) {
      if (columnIndex === 0) {
        // 第一列的合并方法
        const _row_1 = this.namesArr[rowIndex]
        const _col_1 = _row_1 > 0 ? 1 : 0
        return {
          rowspan: _row_1,
          colspan: _col_1
        }
      } else if (columnIndex === 1) {
        // 第二列的合并方法
        const _row_2 = this.fenleisArr[rowIndex]
        const _col_2 = _row_2 > 0 ? 1 : 0
        return {
          rowspan: _row_2,
          colspan: _col_2
        }
      }
    },
    // 删除当前行
    async handleDelete(row) {
      const data = { 'goods_id': row.id + '' }
      try {
        await delGoods(JSON.stringify(data))
        this.$emit('ee')
      } catch (err) {
        console.log(err)
      }
    },
    // 编辑
    handleEdit(index, row) {
      // 跳转页面
      this.$router.push({
        path: '/goodsmanage/exportgoods',
        query: {
          id: row.id
        }
      })
    },
    // 监听是否选中
    changeFun(selection) {
      this.checkTable = selection // 选中行的数据
      this.$emit('headCallBack', this.checkTable) // 向父组件传值
    },
    // 提交当前行
    async submit(index, row) {
      const detail_picture = []
      var is_sales_record = 0
      for (let i = 0; i < row.detail_picture.length; i++) {
        detail_picture.push({
          'image': row.detail_picture[i].image
        })
      }
      var show_region = {}
      row.show_region.forEach(val => {
        delete val.id
        show_region = val
      })
      if (row.is_sales_record === 1) {
        is_sales_record = 0
      } else {
        is_sales_record = 1
      }
      try {
        await editGoods(row.id, row.category_id, row.show_region_type, JSON.stringify(show_region), row.name, row.introduce, row.main_picture, JSON.stringify(detail_picture),
          row.video_url, row.cost_price, row.original_price, row.price, Number(row.goods_sku_status), JSON.stringify(row.goods_sku), row.start_at,
          row.end_at, row.delivery_at, row.goods_limit_stock, row.commission, row.goods_type, row.details, row.sort, is_sales_record)
      } catch (err) {
        console.log(err)
      }
    },
    // 展开当前行
    async rowOpen(row, expandedRows) {
      this.specData = []
      try {
        const res = await getSpecList(row.id)
        const valList = ['names', 'fenleis', 'sanjis']
        for (let j = 0; j < row.goods_sku.length; j++) {
          this.cols.push({ 'label': row.goods_sku[j].type, 'prop': valList[j] })
        }
        this.cols.push({ label: '价格', prop: 'jiage' }, { label: '库存', prop: 'kucun' })
        const arr = []
        for (let i = 0; i < res.data.length; i++) {
          arr.push(res.data[i].goods_sku_detail.split('|'))
        }
        for (let j = 0; j < arr.length; j++) {
          if (arr[0].length === 1) {
            this.specData.push({ 'names': arr[j][0], 'jiage': res.data[j].price, 'kucun': res.data[j].stock })
          } else if (arr[0].length === 2) {
            this.specData.push({ 'names': arr[j][0], 'fenleis': arr[j][1], 'jiage': res.data[j].price, 'kucun': res.data[j].stock })
          } else {
            this.specData.push({ 'names': arr[j][0], 'fenleis': arr[j][1], 'sanjis': arr[j][2], 'jiage': res.data[j].price, 'kucun': res.data[j].stock })
          }
        }
        var arry = []
        for (var i = 0; i < this.specData.length; i++) {
          // 初始化合并数组
          this.namesArr = []
          this.namesPos = 0
          this.fenleisArr = []
          this.fenleisPos = 0
          arry = this.specData
          for (let j = 0; j < arry.length; j++) {
            if (j === 0) {
              // 第一行始终在
              this.namesArr.push(1)
              this.namesPos = 0
              this.fenleisArr.push(1)
              this.fenleisPos = 0
            } else {
              if (arry[j].names === arry[j - 1].names) {
                this.namesArr[this.namesPos] += 1
                this.namesArr.push(0)
              } else {
                this.namesArr.push(1)
                this.namesPos = j
              }
              if (arry[j].fenleis === arry[j - 1].fenleis && arry[j].names === arry[j - 1].names) {
                this.fenleisArr[this.fenleisPos] += 1
                this.fenleisArr.push(0)
              } else {
                this.fenleisArr.push(1)
                this.fenleisPos = j
              }
            }
          }
        }
      } catch (err) {
        console.log(err)
      }
    }
  }
}
</script>
<style scoped>
.table-expand .el-form-item{
  width: 100%;
}
.tableWidth{
  width: 600px;
}
.submit{
  margin-left: 120px;
}
</style>

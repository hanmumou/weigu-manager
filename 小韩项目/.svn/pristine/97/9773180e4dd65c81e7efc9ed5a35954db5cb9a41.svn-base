<template>
  <!-- 父元素 -->
  <div class="add">
    <div class="add_head">添加分类:</div>
    <div class="add_name">
      <div class="name_one">分类名称:</div>
      <el-input v-model="value" placeholder="注：请输入类别名称" class="name_in"/>
      <el-button type="primary" class="name_btn" @click="addshop()">添加</el-button>
    </div>
    <!-- 表格 -->
    <div class="add_table">
      <el-table :data="newlist" style="width: 100%" border>
        <el-table-column prop="id" label="分类id" min-width="20%" align="center"/>
        <el-table-column prop="name" label="分类名称" min-width="20%" align="center"/>
        <el-table-column
          prop="sort"
          label="分类排序"
          min-widt
          h="20%"
          align="center">
          <el-input v-model="sort" placeholder="请输入排序"/>
        </el-table-column>
        <el-table-column label="操作" min-width="20%" align="center">
          <template slot-scope="scope">
            <el-button size="mini" type="danger" @click="handleEdit(scope.$index,scope.row);dialogFormVisible=true">编辑</el-button>
            <el-button size="mini" type="info" @click="deleteEdit(scope.$index,scope.row);delmsg()">删除</el-button>
          </template>
        </el-table-column>
      </el-table>
    </div>
    <!-- 表格设置结束 -->
    <!-- 分页 -->
    <div class="block">
      <el-pagination
        :total="total"
        :pager-count="5"
        :page-size="pagesize"
        background
        layout="prev, pager, next"
        @current-change="current_change"/>
    </div>
    <!-- 分页结束 -->
    <!-- 设置编辑时弹窗 -->
    <div class="block">
      <el-dialog :visible.sync="dialogFormVisible" title="修改商品份分类">

        <el-form :model="form">
          <el-form-item :label-width="formLabelWidth" label="分类名称">
            <el-input v-model="form.name" class="flname"/>
          </el-form-item>
          <el-form-item :label-width="formLabelWidth" label="分类排序">
            <el-input v-model="form.sort" class="flname"/>
          </el-form-item>
        </el-form>

        <div slot="footer" class="dialog-footer">
          <el-button @click="cancelChanage()">取 消</el-button>
          <el-button type="primary" @click="editlist()">确 定</el-button>
        </div>
      </el-dialog>
    </div>
  </div>
</template>
<script>
import { editshop } from '@/api/shopfenleis'
import { onelist, shop } from '@/api/shopfenleis'
export default {
  data: function() {
    return {
      value: '',
      sort: 0,
      newlist: [
        {
          'id': '',
          'name': '',
          'sort': ''
        }
      ],
      // 设置弹框
      formLabelWidth: '120px',
      dialogFormVisible: false,
      form: {
        id: '',
        name: '',
        sort: ''
      },
      total: 0, // 获取列表数据的长度
      pagesize: 0, // 每页的数据列表
      currentPage: 1 // 默认开始页面
    }
  },
  created() {
    this.getshop()
  },
  mounted() {
    console.log(this.$store)
  },
  methods: {
    // 点击删除时弹出message提示信息
    delmsg() {
      this.$message({
        message: '删除成功',
        type: 'success'
      })
    },
    // currentpage改变时会触发
    current_change: function(currentPage) {
      this.currentPage = currentPage
      this.getshop()
    },
    // 展示列表
    async getshop() {
      try {
        const res = await shop(this.currentPage)
        this.newlist = res.data
        this.total = res.meta.pagination.total
        this.pagesize = res.meta.pagination.per_page
      } catch (err) {
        console.log(err)
      }
    },
    // 添加列表
    async addshop() {
      console.log('添加列表')
      this.$store.dispatch('addshoplist', { value: this.value, sort: this.sort }).then(() => {
        this.$store.state.addres
        for (const i in this.newlist) {
          if (this.value === this.newlist[i].name) {
            this.$message('名称已存在')
          } else if (this.value !== '') {
            this.$message({
              message: '添加成功',
              type: 'success'
            })
          }
        }
        console.log(this.$store.dispatch('addshoplist').res)
        this.value = ''
        this.getshop()
      })
    },
    // 表格的编辑按钮
    async handleEdit(index, row) {
      // 显示单个商品列表
      console.log(index, row)
      try {
        const res = await onelist(row.id)
        console.log(res)
        this.form = res.community_goods_categoris[0]
      } catch (err) {
        console.log(err)
      }
    },
    // 弹框的确定按钮，进行编辑
    async editlist() {
      console.log('编辑')
      try {
        this.$message({
          message: '修改成功',
          type: 'success'
        })
        this.dialogFormVisible = false
      } catch (err) {
        console.log(err)
      }
    },
    // 弹窗的取消按钮
    cancelChanage() {
      this.dialogFormVisible = false
      this.$message('取消修改')
    },
    // 表格的删除按钮
    async deleteEdit(index, row) {
      console.log(index, row)
      this.$store.dispatch('deletell', row.id).then(() => {
        console.log(111)
        this.getshop()
      })
    }
  }

}
// }
</script>
<style>
  .add{
    width: 90%;
    margin-left: 4%;
    font-size: 14px;
  }
  .add_head{
    margin-top: 70px;
    margin-bottom: 40px;
  }
  .add_name{
    width: 100%;
    display: flex;
    flex-direction: row;
  }
  .name_one{
    width: 80px;
    margin-right: 20px;
    height: 40px;
    line-height: 40px;
  }
  .name_btn{
    margin-right: 30px;
  }
  .add_table{
    margin-top: 50px;
  }
  .name_in{
    width: 250px;
    margin-right: 30px;
  }
  /* 编辑框的样式 */
  .flname{
    width: 500px;
  }
  .block .el-dialog{
    width: 720px;
    height: 356px;
  }
   /* 分页设置 */
  .block{
    text-align: center;
    margin-top: 20px;
    margin-right: 144px;
  }
</style>
